"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var createBistate_1 = __importStar(require("./createBistate"));
var util_1 = require("./util");
function createStore(initialState) {
    var current = createBistate_1.default(initialState);
    var getState = function () { return current; };
    var listenerList = [];
    var hasListened = false;
    var subscribe = function (listener) {
        if (!util_1.isFunction(listener)) {
            throw new Error("Expected listener to be a function, but got " + listener);
        }
        if (!listenerList.includes(listener)) {
            listenerList.push(listener);
        }
        // publish before listening
        if (!hasListened) {
            hasListened = true;
            // trigger listener directly
            if (hasPublished)
                listener(current);
        }
        return function () {
            var index = listenerList.indexOf(listener);
            if (index !== -1) {
                listenerList.splice(index, 1);
            }
        };
    };
    var hasPublished = false;
    var publish = function (state) {
        hasPublished = true;
        current = state;
        createBistate_1.watch(current, publish);
        var list = __spread(listenerList);
        var _loop_1 = function (i) {
            var listener = list[i];
            if (listenerList.includes(listener)) {
                createBistate_1.mutate(function () { return listener(current); });
            }
        };
        for (var i = 0; i < list.length; i++) {
            _loop_1(i);
        }
    };
    createBistate_1.watch(current, publish);
    return {
        getState: getState,
        subscribe: subscribe
    };
}
exports.default = createStore;
//# sourceMappingURL=createStore.js.map